# Example logstash pipeline conf file

# input section
input { 
  # Pulls devices active in the last 5 minutes
  http_poller { 
    urls => { 
      device_activity => { 
        url => "http://192.168.0.100:2501/devices/last-time/-305/devices.ekjson"
        method => post
        auth => {
          user => "kismet"
          password => "password"
        }
        body => 'json={"fields":["kismet.device.base.type","kismet.device.base.location","kismet.device.base.tags","kismet.device.base.manuf","kismet.device.base.num_alerts","kismet.device.base.server_uuid","kismet.device.base.last_time","kismet.device.base.frequency","kismet.device.base.channel","kismet.device.base.crypt","kismet.device.base.commonname","kismet.device.base.name","kismet.device.base.phyname","kismet.device.base.macaddr","kismet.device.base.key","kismet.device.base.key","kismet.device.base.packets.rx","kismet.device.base.packets.tx","kismet.device.base.signal"]}'
        headers => {
          "Accept" => "application/json"
          "Content-Type" => "application/x-www-form-urlencoded"
        }
      }
    }
    add_field => { "[@metadata][dest_index]" => "kismet_device_activity" }
    add_field => { "kismet_host_inline" => "system-one" }
    add_field => { "kismet_location_inline" => "home" }
    request_timeout => 8
    #schedule => { cron => "* * * * * UTC"}
    schedule => { every => "5m" }
    codec => "json_lines"
  }
}

# filter section
filter {
  if ([@metadata][dest_index] == "kismet_device_activity") {
    date {
      match => ["kismet_device_base_last_time","UNIX"] target => "kismetdtg"
    }
    if [kismet_device_base_channel] == "FHSS" {
       prune { remove_field => ["[kismet_device_base_channel]"] }
       mutate { add_field => { "[kismet_device_base_channel_fhss]" => "FHSS" } }
       mutate { add_field => { "[kismet_device_base_channel]" => 0 } }
    }
    if [kismet_device_base_tags] == 0 {
       prune { remove_field => ["[kismet_device_base_tags]"] }
       mutate {
          add_field => { "[kismet_device_base_tags][notes]" => "NA" }
       }
    }
    if [kismet_device_base_signal] {
       mutate { add_field => { "kismet_device_base_common_signal_max_signal" => "%{[kismet_device_base_signal][kismet_common_signal_max_signal]}" } }
       mutate { add_field => { "kismet_device_base_common_signal_min_signal" => "%{[kismet_device_base_signal][kismet_common_signal_min_signal]}" } }
       mutate { add_field => { "kismet_device_base_common_signal_last_signal" => "%{[kismet_device_base_signal][kismet_common_signal_last_signal]}" } }
       mutate { add_field => { "kismet_device_base_common_signal_type" => "%{[kismet_device_base_signal][kismet_common_signal_type]}" } }
       prune { remove_field => ["[kismet_device_base_signal]"] }
    }

    if [kismet_device_base_location] == 0 {
       mutate { remove_field => ["[kismet_device_base_location]"] }
    }

    if [kismet_device_base_location][kismet_common_location_avg_loc] {
        mutate { add_field => { "kismet_device_base_location_avg_geopoint" => "%{[kismet_device_base_location][kismet_common_location_avg_loc][kismet_common_location_geopoint][1]},%{[kismet_device_base_location][kismet_common_location_avg_loc][kismet_common_location_geopoint][0]}" } }
        mutate { add_field => { "kismet_device_base_location_avg_alt" => "%{[kismet_device_base_location][kismet_common_location_avg_loc][kismet_common_location_alt]}" } }
        prune { remove_field => ["[kismet_device_base_location]"] }
    }
    prune {
      remove_field => ["[kismet_device_base_location][kismet_common_location_last]"]
      remove_field => ["[kismet_device_base_location][kismet_common_location_max_loc]"]
      remove_field => ["[kismet_device_base_location][kismet_common_location_min_loc]"]
    }
    mutate {
      add_field => {
        "my_fingerprint" => "devact_%{[kismet_device_base_key]}_%{[kismet_device_base_last_time]}"
      }
    }
    if [field_unknown_not_registered] { prune { remove_field => ["[field_unknown_not_registered]"] } }
  }
}

# output section
output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "%{[@metadata][dest_index]}"
    document_id => "%{[my_fingerprint]}"
  }
  #disable this once in prod stdout
  #stdout { codec => rubydebug } # output any left overs
}
